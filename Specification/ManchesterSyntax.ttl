prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix graph: <https://data.rijksfinancien.nl/html/graph/>
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix rule: <https://data.rijksfinancien.nl/html/model/rule/>
prefix section: <https://data.rijksfinancien.nl/html/id/section/>
prefix shp: <https://data.rijksfinancien.nl/html/model/shp/>
prefix standard: <https://data.rijksfinancien.nl/html/id/standard/>
prefix target: <https://data.rijksfinancien.nl/html/model/target/>

  manchester:
    a
      owl:Ontology,
      void:Dataset;
    dct:conformsTo 'https://datatracker.ietf.org/doc/html/rfc1942'^^xsd:anyURI;
    dct:created '2023-07-19'^^xsd:date;
    dct:creator
      'Flores Bakker',
      'Wouter Beek';
    dct:description '''The Manchester Syntax Vocabulary models the Manchester Syntax in RDF. Manchester Syntax is a human-readable and compact syntax used to represent knowledge in the Web Ontology Language (OWL), which is a semantic web language based on RDF and used for defining and sharing ontologies. Manchester Syntax is designed to be human-readable and concise, making it easier for users to create and understand OWL ontologies. It provides an alternative to the more verbose syntax of OWL itself. '''@en;
    dct:abstract '''The Manchester Syntax Vocabulary models the Manchester Syntax in RDF. Manchester Syntax is a human-readable and compact syntax used to represent knowledge in the Web Ontology Language (OWL), which is a semantic web language based on RDF and used for defining and sharing ontologies. Manchester Syntax is designed to be human-readable and concise, making it easier for users to create and understand OWL ontologies. It provides an alternative to the more verbose syntax of OWL itself. '''@en;
    dct:language 'iso639-1:en';
    dct:license 'http://creativecommons.org/licenses/by/4.0'^^xsd:anyURI;
    dct:publisher <https://www.w3.org/community/manchestersyntax/>;
	dct:source <https://github.com/floresbakker/manchestersyntax/>;
    dct:subject 'HTML'@en;
    dct:title 'HTML Ontology'@en;
    foaf:homepage 'https://www.w3.org/community/manchestersyntax/'^^xsd:anyURI;
    owl:imports
      dct:,
      owl:,
      prov:,
      rdf:,
      rdfs:,
      sh:,
      skos:;
    owl:versionInfo '0.1.0';
	owl:versionIRI <https://github.com/floresbakker/manchestersyntax/tree/main>;
    vann:preferredNamespacePrefix 'manchester';
    vann:preferredNamespaceUri 'https://data.rijksfinancien.nl/manchestersyntax/model/def/';
    void:subSet graph:model;
    void:uriRegexPattern '^https://data.rijksfinancien.nl/manchestersyntax/def/';
    void:uriSpace 'https://data.rijksfinancien.nl/manchestersyntax/model/def/'^^xsd:anyURI.

  standard:manchestersyntax
    a dct:Standard;
    dct:created '2023-07-19'^^xsd:date;
    dct:source 'https://www.w3.org/TR/owl2-manchester-syntax'^^xsd:anyURI;
    skos:prefLabel 'Manchester Syntax'@en.

### OWL Class

 shp:SerializableOwlClass
    a sh:NodeShape;
    sh:rule rule:SerializeOwlClass;
    sh:target target:SerializableOwlClass;
    skos:prefLabel 'Serializable owl class shape'@en.

  target:SerializableOwlClass
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {
  # Any OWL class that is not further expressed in class expression
  
  $this a owl:Class.
  
  filter not exists {
    $this rdfs:subClassOf []
  }
  filter not exists {
    $this owl:equivalentClass []
  }
  filter not exists {
    $this owl:unionOf []
  }
  filter not exists {
    $this owl:intersectionOf []
  }
  filter not exists {
    $this owl:complementOf []
  }
  filter not exists {
    $this owl:oneOf []
  }
  
  # The OWL class must not have an Manchester Syntax string yet
  
  filter not exists {
    $this manchester:definition [].
  }
  filter not exists {
    $this manchester:label [].
  }
}
  '''.

  rule:SerializeOwlClass
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for an OWL Class.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl class'@en;
    sh:construct '''
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterLabel. 
} where {

  # Get the label of the OWL class to be serialized.
  {$this skos:prefLabel ?label.
    }
  union {
    $this rdfs:label ?label2.
  }
  union {
    filter not exists { $this rdfs:label [].} 
	filter not exists { $this skos:prefLabel [].}
	# We use an heuristic based on the last part of the IRI to determine the manchester-syntax
    bind(replace(str($this),'.*[/#]','') as ?label3)
 }
  BIND(STR(COALESCE(?label, ?label2, ?label3)) as ?manchesterLabel)
} 
'''.

### OWL Restriction

shp:SerializableOwlRestriction_AllValuesFrom
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_AllValuesFrom;
    sh:target target:SerializableOwlRestriction_AllValuesFrom;
    skos:prefLabel 'Serializable owl restriction owl:allValuesFrom shape'@en.

  target:SerializableOwlRestriction_AllValuesFrom
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:allValuesFrom [].
   
  filter not exists {
    $this owl:allValuesFrom ?allValuesFromClass
	filter not exists {
	?allValuesFromClass manchester:label []
    }
  }
 }
  '''.

  rule:SerializeOwlRestriction_AllValuesFrom
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:allValuesFrom.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:allValuesFrom'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  $this owl:allValuesFrom ?alValuesFromClass;
        owl:onProperty ?someProperty.
  
  # Get the label of allValuesFromClass
  {?allValuesFromClass skos:prefLabel ?classLabel1}
  UNION 
  {?allValuesFromClass rdfs:label ?classLabel2}
  UNION 
  {?allValuesFromClass manchester:label ?classLabel3}
  # Get the label of the OWL class to be serialized. 
  BIND(str(COALESCE(?classLabel1, ?classLabel2, ?classLabel3)) as ?allValuesClassLabel)
  
  # Get the label of the property
  {?someProperty skos:prefLabel ?propertyLabel1}
  UNION 
  {?someProperty rdfs:label ?propertyLabel2}
  UNION 
  {?someProperty manchester:label ?propertyLabel3}
  
  BIND(str(COALESCE(?propertyLabel1, ?propertyLabel2, ?propertyLabel3)) as ?labelProperty)
  BIND(CONCAT(?labelProperty, " only ", str(?allValuesClassLabel)) as ?manchesterDefinition)
  
  # Get the label of the OWL restriction class 
  {$this skos:prefLabel ?thisLabel1}
  UNION 
  {$this rdfs:label ?thisLabel2}
  UNION 
  {$this manchester:label ?thisLabel3}
  # Get the label of the OWL class to be serialized. Take the definition as label if there is none.
  BIND(str(COALESCE(?thisLabel1, ?thisLabel2, ?thisLabel3, ?manchesterDefinition)) as ?manchesterLabel)
  
  
  
  


}  '''.


shp:SerializableOwlRestriction_SomeValuesFrom
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_SomeValuesFrom;
    sh:target target:SerializableOwlRestriction_SomeValuesFrom;
    skos:prefLabel 'Serializable owl restriction owl:someValuesFrom shape'@en.

  target:SerializableOwlRestriction_SomeValuesFrom
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:someValuesFrom [].
   
  filter not exists {
    $this owl:someValuesFrom ?someValuesFromClass
	filter not exists {
	?someValuesFromClass manchester:label []
    }
  }
 }
  '''.

  rule:SerializeOwlRestriction_SomeValuesFrom
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:someValuesFrom.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:someValuesFrom'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterlabel. 
} where {

  $this owl:someValuesFrom ?someValuesFromClass;
        owl:onProperty ?someProperty.
  ?someValuesFromClass manchester:label ?labelClass.
  ?someProperty manchester:label ?labelProperty.
  # Get the label of the OWL class to be serialized.
  BIND(CONCAT(?labelProperty, " some ", str(?labelClass)) as ?manchesterlabel)

}  '''.


shp:SerializableOwlRestriction_hasValue
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_hasValue;
    sh:target target:SerializableOwlRestriction_hasValue;
    skos:prefLabel 'Serializable owl restriction owl:hasValue shape'@en.

  target:SerializableOwlRestriction_hasValue
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:hasValue [].
   
  filter not exists {
    $this owl:hasValue ?valueClass
	filter not exists {
	?valueClass manchester:label []
    }
  }
 }
  '''.

  rule:SerializeOwlRestriction_hasValue
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:hasValue.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:hasValue'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterlabel. 
} where {

  $this owl:hasValue ?valueClass;
        owl:onProperty ?someProperty.
  ?valueClass manchester:label ?labelValue.
  ?someProperty manchester:label ?labelProperty.
  # Get the label of the OWL class to be serialized.
  BIND(CONCAT(str(?labelProperty), " value ", str(?labelValue)) as ?manchesterlabel)

}  '''.

shp:SerializableOwlRestriction_cardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_cardinality;
    sh:target target:SerializableOwlRestriction_cardinality;
    skos:prefLabel 'Serializable owl restriction owl:cardinality shape'@en.

  target:SerializableOwlRestriction_cardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:cardinality [].
   
  filter not exists {
    $this manchester:label []
  }
 }
  '''.

  rule:SerializeOwlRestriction_cardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:cardinality.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:cardinality'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterlabel. 
} where {

  $this owl:cardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty manchester:label ?labelProperty.
  # Get the label of the OWL class to be serialized.
  BIND(CONCAT(str(?labelProperty), " exactly ", str(?n)) as ?manchesterlabel)

}  '''.

shp:SerializableOwlRestriction_maxCardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_maxCardinality;
    sh:target target:SerializableOwlRestriction_maxCardinality;
    skos:prefLabel 'Serializable owl restriction owl:maxCardinality shape'@en.

  target:SerializableOwlRestriction_maxCardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:maxCardinality [].
   
  filter not exists {
    $this manchester:label []
  }
 }
  '''.

  rule:SerializeOwlRestriction_maxCardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:maxCardinality.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:maxCardinality'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterlabel. 
} where {

  $this owl:maxCardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty manchester:label ?labelProperty.
  # Get the label of the OWL class to be serialized.
  BIND(CONCAT(str(?labelProperty), " max ", str(?n)) as ?manchesterlabel)

}  '''.

shp:SerializableOwlRestriction_minCardinality
    a sh:NodeShape;
    sh:rule rule:SerializeOwlRestriction_minCardinality;
    sh:target target:SerializableOwlRestriction_minCardinality;
    skos:prefLabel 'Serializable owl restriction owl:minCardinality shape'@en.

  target:SerializableOwlRestriction_minCardinality
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this a owl:Restriction;
        owl:minCardinality [].
   
  filter not exists {
    $this manchester:label []
  }
 }
  '''.

  rule:SerializeOwlRestriction_minCardinality
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for OWL Restriction owl:minCardinality.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl restriction owl:minCardinality'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterlabel. 
} where {

  $this owl:minCardinality ?n;
        owl:onProperty ?someProperty.
  ?someProperty manchester:label ?labelProperty.
  # Get the label of the OWL class to be serialized.
  BIND(CONCAT(str(?labelProperty), " min ", str(?n)) as ?manchesterlabel)

}  '''.

shp:Serializable_subClassOf
    a sh:NodeShape;
    sh:rule rule:Serialize_subClassOf;
    sh:target target:Serializable_subClassOf;
    skos:prefLabel 'Serializable rdfs:subClassOf shape'@en.

  target:Serializable_subClassOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A subclass of some other class, of which the latter's underlying class expressions are already serialized to manchester syntax.
  
  {$this rdfs:subClassOf [].
   
  filter not exists {
    $this manchester:label []
  }
  
  filter not exists {
    $this rdfs:subClassOf ?subClassOfClass
	filter not exists {
	?subClassOfClass manchester:label []
    }
  }
  }
  
  
  # Also get any subclass of some other class, the latter being undefined. We will infer the manchester-syntax for this with an heuristic.
  
  UNION 
  
  { $this rdfs:subClassOf ?undefinedClass.
  filter not exists {?undefinedClass rdf:type owl:Class}
  filter not exists {?undefinedClass rdf:type owl:Restriction}
  filter not exists {?undefinedClass rdfs:subClassOf []}
  filter not exists {?undefinedClass owl:equivalentClass []}
  filter not exists {?undefinedClass owl:oneOf []}
  filter not exists {?undefinedClass owl:unionOf []}
  filter not exists {?undefinedClass owl:intersectionOf []}
  filter not exists {?undefinedClass owl:complementOf []}
  
 }
 }
  '''.

  rule:Serialize_subClassOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for rdfs:subClassOf classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for rdfs:subClassOf classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  $this rdfs:subClassOf ?subClassOfClass
  {?subClassOfClass skos:prefLabel ?definition1}
  UNION 
  {?subClassOfClass rdfs:label ?definition2}
  UNION 
  {?subClassOfClass manchester:label ?derivedDefinition}
  UNION { # There may be superclasses that unfortunately do not get defined in the turtle file. 
  $this rdfs:subClassOf ?subClassOfClass
  filter not exists {  ?subClassOfClass rdfs:label []. }
  filter not exists {  ?subClassOfClass skos:prefLabel []. }
  filter not exists {  ?subClassOfClass manchester:label []. }

  # We use an heuristic based on the last part of the IRI to determine the manchester-syntax
  bind(replace(str(?subClassOfClass),'.*[/#]','') as ?implicitDefinition)
 }
  BIND(CONCAT("[=",COALESCE(?definition1, ?definition2),"=]") as ?explicitDefinition)
  
  # Get the definition of the class to be serialized.
  BIND(CONCAT("SubClassOf ", str(COALESCE(?explicitDefinition, ?derivedDefinition, ?implicitDefinition))) as ?manchesterDefinition)

  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  
  # Get the label of the class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)


}  '''.

shp:Serializable_equivalentClass
    a sh:NodeShape;
    sh:rule rule:Serialize_equivalentClass;
    sh:target target:Serializable_equivalentClass;
    skos:prefLabel 'Serializable owl:equivalentClass shape'@en.

  target:Serializable_equivalentClass
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # An equivalent class of some other class, of which the latter's underlying class expressions are already serialized to manchester syntax.
  
  $this owl:equivalentClass [].
   
  filter not exists {
    $this owl:equivalentClass ?equivalentClassClass
	filter not exists {
	?equivalentClassClass manchester:label []
    }
  }
 }
  '''.

  rule:Serialize_equivalentClass
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for owl:equivalentClass classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:equivalentClass classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  $this owl:equivalentClass ?equivalentClassClass.
  {?equivalentClassClass skos:prefLabel ?definition1}
  UNION 
  {?equivalentClassClass rdfs:label ?definition2}
  UNION 
  {?equivalentClassClass manchester:label ?definition3}
  # Get the label of the class to be serialized.
  BIND(CONCAT("EquivalentTo ", str(COALESCE(?definition1, ?definition2, ?definition3))) as ?manchesterDefinition)

  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  # Get the label of the OWL class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)


}  '''.

shp:Serializable_unionOf
    a sh:NodeShape;
    sh:rule rule:Serialize_unionOf;
    sh:target target:Serializable_unionOf;
    skos:prefLabel 'Serializable owl:unionOf shape'@en.

  target:Serializable_unionOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this owl:unionOf [].
   
  filter not exists {
    $this owl:unionOf/rdf:rest*/rdf:first ?someClass.
	filter not exists {
	?someClass manchester:label []
    }
  }
 }
  '''.

  rule:Serialize_unionOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for owl:unionOf classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:unionOf classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  {select (group_concat(?label0;separator=' or ') as ?manchesterDefinition) where {
  $this owl:unionOf/rdf:rest*/rdf:first/manchester:label ?label0.
  }
}
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  # Get the label of the OWL class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)
}
'''.

shp:Serializable_intersectionOf
    a sh:NodeShape;
    sh:rule rule:Serialize_intersectionOf;
    sh:target target:Serializable_intersectionOf;
    skos:prefLabel 'Serializable owl:intersectionOf shape'@en.

  target:Serializable_intersectionOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A class that is the intersection of other classes for which the latter's underlying class expressions are already serialized to manchester syntax
  
  $this owl:intersectionOf [].
   
  filter not exists {
    $this owl:intersectionOf/rdf:rest*/rdf:first ?someClass.
	filter not exists {
	?someClass manchester:label []
    }
  }
 }
  '''.

  rule:Serialize_intersectionOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for owl:intersectionOf classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:intersectionOf classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterlabel;
        manchester:definition ?manchesterDefinition. 
} where {

  {select (group_concat(?label0;separator=' and ') as ?manchesterDefinition) where {
  $this owl:intersectionOf/rdf:rest*/rdf:first/manchester:label ?label0.
  
}
}
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  # Get the label of the OWL class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)
}
'''.

shp:Serializable_oneOf
    a sh:NodeShape;
    sh:rule rule:Serialize_oneOf;
    sh:target target:Serializable_oneOf;
    skos:prefLabel 'Serializable owl:oneOf shape'@en.

  target:Serializable_oneOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A OWL class restriction for which the underlying class expressions are already serialized to manchester syntax
  
  $this owl:oneOf [].
   
  filter not exists {
    $this owl:oneOf/rdf:rest*/rdf:first ?someIndividual.
	filter not exists {
	?someIndividual manchester:label []
    }
  }
 }
  '''.

  rule:Serialize_oneOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for owl:oneOf classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:oneOf classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  {select (group_concat(?label0;separator=' ') as ?individualLabel) where {
  $this owl:oneOf/rdf:rest*/rdf:first/manchester:label ?label0.
  
}
}

  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  # Get the label of the OWL class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)
  BIND(CONCAT("{", ?individualLabels, "}") as ?manchesterDefinition)
}
'''.

shp:Serializable_complementOf
    a sh:NodeShape;
    sh:rule rule:Serialize_complementOf;
    sh:target target:Serializable_complementOf;
    skos:prefLabel 'Serializable owl:complementOf shape'@en.

  target:Serializable_complementOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A class that is the complement of some other class, of which the latter's underlying class expressions are already serialized to manchester syntax.
  
  $this owl:complementOf [].
   
  filter not exists {
    $this owl:complementOf ?complementOfClass
	filter not exists {
	?complementOfClass manchester:label []
    }
  }
 }
  '''.

  rule:Serialize_complementOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for owl:complementOf classes.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:complementOf classes.'@en;
    sh:construct '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL class to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:definition ?manchesterDefinition. 
} where {

  $this owl:complementOf ?complementOfClass.
  {?complementOfClass skos:prefLabel ?definition1}
  UNION 
  {?complementOfClass rdfs:label ?definition2}
  UNION 
  {?complementOfClass manchester:label ?definition3}
  UNION { # There may be complement classes that unfortunately do not get defined in the turtle file. 
  $this owl:complementOf ?complementOfClass.
  filter not exists {  ?complementOfClass rdfs:label []. }
  filter not exists {  ?complementOfClass skos:prefLabel []. }
  filter not exists {  ?complementOfClass manchester:label []. }
  
  # We use an heuristic based on the last part of the IRI to determine the manchester-syntax
  bind(replace(str(?complementOfClass),'.*[/#]','') as ?definition4)
  }
  # Get the label of the class to be serialized.
  BIND(CONCAT("not ", str(COALESCE(?definition1, ?definition2, ?definition3, ?definition4))) as ?manchesterDefinition)

  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?label3}
  # Get the label of the class to be serialized.
  BIND(str(COALESCE(?label1, ?label2, ?label3)) as ?manchesterLabel)

} 
'''.

shp:Serializable_datatypeProperty
    a sh:NodeShape;
    sh:rule rule:Serialize_datatypeProperty;
    sh:target target:Serialize_datatypeProperty;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape'@en.

  target:Serialize_datatypeProperty
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype property for which underlying class expressions are already serialized to manchester syntax, but which does not have subPropertyOf or equivalentProperty relations.
  
  $this rdf:type owl:DatatypeProperty.
  filter not exists {
  $this manchester:label []}
   
  filter not exists {
    $this rdfs:domain ?someClass.
	filter not exists {
	  ?someClass manchester:label []
    }
  }

  filter not exists {
    $this rdfs:subPropertyOf []
    }
  
  filter not exists {
    $this owl:equivalentProperty []
    }
 }
  '''.


  rule:Serialize_datatypeProperty
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax label and definition for the rdfs:domain of an owl:DatatypeProperty.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:DatatypeProperty.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL property to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:datatypeProperty ?manchesterDatatypeProperty;
        manchester:domain ?manchesterDomain;
        manchester:range ?manchesterRange;
        manchester:subPropertyOf ?manchesterSuperProperty.		
} where {


  # Label
  {
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?derivedLabel}
  
  BIND(COALESCE(?label1, ?label2) as ?manchesterLabel)
  BIND(CONCAT("[=",COALESCE(?label1, ?label2),"=]") as ?explicitLabel)
  
  # Get the label of the datatype property to be serialized.
  BIND(CONCAT("Property name:  ", str(COALESCE(?explicitLabel, ?derivedLabel))) as ?manchesterDatatypeProperty)
  
  }
  
  # Domain
  UNION
  {$this rdfs:domain ?domainClass.
  ?domainClass manchester:label ?domain.
  BIND(CONCAT("[=",?domain,"=]") as ?domainDefinition)
  BIND(CONCAT("Domain:  ", ?domainDefinition) as ?manchesterDomain)
  }
  
  # Range 
  UNION
  {$this rdfs:range ?rangeDatatype.
#  ?rangeDatatype manchester:label ?range.
  BIND(CONCAT("Range:  ", function:getPrefixedIRI(?rangeDatatype)) as ?manchesterRange)
  }
}  
'''.

shp:Serializable_subPropertyOf
    a sh:NodeShape;
    sh:rule rule:Serialize_subPropertyOf;
    sh:target target:Serialize_subPropertyOf;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape with a rdfs:subPropertyOf relation.'@en.

  target:Serialize_subPropertyOf
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype property for which underlying class expressions are already serialized to manchester syntax, together with a subPropertyOf relation.
  
  $this rdf:type owl:DatatypeProperty;
        rdfs:subPropertyOf ?someProperty.
  filter not exists {
  $this manchester:label []}
   
  filter not exists {
    $this rdfs:domain ?someClass.
	filter not exists {
	?someClass manchester:label []
    }
  }

  filter not exists {
    $this rdfs:subPropertyOf ?someProperty.
	filter not exists {
	?someProperty manchester:label []
    }
	}
 }
'''.

  rule:Serialize_subPropertyOf
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax for an owl:DatatypeProperty with a subPropertyOf relation.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:DatatypeProperty with a subPropertyOf relation.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL property to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:datatypeProperty ?manchesterDatatypeProperty;
        manchester:domain ?manchesterDomain;
        manchester:range ?manchesterRange;
        manchester:subPropertyOf ?manchesterSuperProperty.		
} where {

  # Label
  {
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?derivedLabel}
  
  BIND(COALESCE(?label1, ?label2) as ?manchesterLabel)
  BIND(CONCAT("[=",COALESCE(?label1, ?label2),"=]") as ?explicitLabel)
  
  # Get the label of the datatype property to be serialized.
  BIND(CONCAT("Property name:  ", str(COALESCE(?explicitLabel, ?derivedLabel))) as ?manchesterDatatypeProperty)
  }
  
  # Domain
  UNION
  {$this rdfs:domain ?domainClass.
  ?domainClass manchester:label ?domain.
  BIND(CONCAT("[=",?domain,"=]") as ?domainDefinition)
  BIND(CONCAT("Domain:  ", ?domainDefinition) as ?manchesterDomain)
  }
  
  # Range 
  UNION
  {$this rdfs:range ?rangeDatatype.
#  ?rangeDatatype manchester:label ?range.
  BIND(CONCAT("Range:  ", function:getPrefixedIRI(?rangeDatatype)) as ?manchesterRange)
  }

  # subPropertyOf
  UNION 
  {$this rdfs:subPropertyOf ?superProperty.
  ?superProperty manchester:label ?superPropertyDefinition.
  BIND(CONCAT("[=",?superPropertyDefinition,"=]") as ?superPropertyLabel)
  BIND(CONCAT("SubPropertyOf:  ", ?superPropertyLabel) as ?manchesterSuperProperty)
  }
}  
'''.

shp:Serializable_equivalentProperty
    a sh:NodeShape;
    sh:rule rule:Serialize_equivalentProperty;
    sh:target target:Serialize_equivalentProperty;
    skos:prefLabel 'Serializable owl:DatatypeProperty shape with a owl:equivalentProperty relation.'@en.

  target:Serialize_equivalentProperty
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A datatype property for which underlying class expressions are already serialized to manchester syntax, together with a equivalentProperty relation.
  
  $this rdf:type owl:DatatypeProperty;
        owl:equivalentProperty ?someProperty.
  filter not exists {
  $this manchester:label []}
   
  filter not exists {
    $this rdfs:domain ?someClass.
	filter not exists {
	?someClass manchester:label []
    }
  }

  filter not exists {
    $this owl:equivalentProperty ?someProperty.
	filter not exists {
	?someProperty manchester:label []
    }
	}
 }
'''.

  rule:Serialize_equivalentProperty
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates a manchester syntax for an owl:DatatypeProperty with an equivalentProperty relation.'@en;
    skos:prefLabel 'Manchester Syntax serialisation rule for owl:DatatypeProperty with an equivalentProperty relation.'@en;
    sh:construct '''
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

  # create the manchester syntax for the OWL property to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:datatypeProperty ?manchesterDatatypeProperty;
        manchester:domain ?manchesterDomain;
        manchester:range ?manchesterRange;
        manchester:equivalentProperty ?manchesterEquivalentProperty.		
} where {

  # Label
  {
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?derivedLabel}
  
  BIND(COALESCE(?label1, ?label2) as ?manchesterLabel)
  BIND(CONCAT("[=",COALESCE(?label1, ?label2),"=]") as ?explicitLabel)
  
  # Get the label of the datatype property to be serialized.
  BIND(CONCAT("Property name:  ", str(COALESCE(?explicitLabel, ?derivedLabel))) as ??manchesterDatatypeProperty)
  }
  
  # Domain
  UNION
  {$this rdfs:domain ?domainClass.
  ?domainClass manchester:label ?domain.
  BIND(CONCAT("[=",?domain,"=]") as ?domainDefinition)
  BIND(CONCAT("Domain:  ", ?domainDefinition) as ?manchesterDomain)
  }
  
  # Range 
  UNION
  {$this rdfs:range ?rangeDatatype.
#  ?rangeDatatype manchester:label ?range.
  BIND(CONCAT("Range:  ", function:getPrefixedIRI(?rangeDatatype)) as ?manchesterRange)
  }

  # equivalentProperty
  UNION 
  {$this owl:equivalentProperty ?equivalentProperty.
  ?equivalentProperty manchester:label ?equivalentPropertyDefinition.
  BIND(CONCAT("[=",?equivalentPropertyDefinition,"=]") as ?equivalentPropertyLabel)
  BIND(CONCAT("equivalentProperty:  ", ?equivalentPropertyLabel) as ?manchesterEquivalentProperty)
  }
}  
'''.

shp:Serializable_namedIndividual
    a sh:NodeShape;
    sh:rule rule:Serialize_namedIndividual;
    sh:target target:Serialize_namedIndividual;
    skos:prefLabel 'Serializable Named Individual shape.'@en.

target:Serialize_namedIndividual
    a sh:SPARQLTarget;
    sh:select '''
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select $this {

  # A named individual for which underlying class expressions are already serialized to manchester syntax.
  
  $this rdf:type ?class.   
  filter not exists {
    $this manchester:label []
  }  
 
  filter not exists {
    $this rdf:type ?class. 
    filter not exists {
     ?class manchester:label []
    }
  }
}
'''.

rule:Serialize_namedIndividual
  a sh:SPARQLRule;
  skos:prefLabel 'Named individuals rule'@en;
  rdfs:comment 'The named individuals rule creates a section of named individuals for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix vann: <http://purl.org/vocab/vann/>

construct {

  # create the manchester syntax for the named individual to be serialized.
  
  $this manchester:label ?manchesterLabel;
        manchester:type ?manchesterType;
        manchester:fact ?manchesterFact.
      
} where {

  # Label
  {
  {$this skos:prefLabel ?label1}
  UNION 
  {$this rdfs:label ?label2}
  UNION 
  {$this manchester:label ?derivedLabel}
  
  BIND(COALESCE(?label1, ?label2) as ?manchesterLabel)
  BIND(CONCAT("[=",COALESCE(?label1, ?label2),"=]") as ?explicitLabel)
  
  # Get the label of the named individual to be serialized.
  BIND(CONCAT("Name of individual:  ", str(COALESCE(?explicitLabel, ?derivedLabel))) as ?manchesterLabel)
  }
  
  # Type
  UNION
  {$this a ?class.
  ?class manchester:label ?className.
  BIND(CONCAT("[=",?className,"=]") as ?typeDefinition)
  BIND(CONCAT("Type:  ", ?typeDefinition) as ?manchesterType)
  }
  
  # Fact 
  UNION
  {$this ?property ?literal.
  ?property rdf:type owl:DatatypeProperty; 
            manchester:label ?propertyLabel.
  }
  UNION
  {$this ?property ?object.
  ?property rdf:type owl:ObjectProperty; 
            manchester:label ?propertyLabel.
  ?object   manchester:label ?objectLabel.}
  
  BIND(CONCAT("Fact:  ", function:getPrefixedIRI(?propertyLabel), " ", COALESCE(str(?literal), ?objectLabel)) as ?manchesterFact)

  }
  
""".

function:getPrefixedIRI
    a sh:SPARQLFunction ;
    rdfs:comment "Gets prefixed IRI from full IRI." ;
    sh:parameter [
        sh:path function:IRI ;
        sh:datatype xsd:anyURI ;
        sh:description "The full IRI of a RDF resource as defined in an ontology." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
{
    VALUES (?ontology ?IRI_base ?IRI_prefix) {
      (dcm: "http://purl.org/dc/dcmitype/" "dcm")
      (dct: "http://purl.org/dc/terms/" "dct")
      (foaf: "http://xmlns.com/foaf/0.1/" "foaf")
      (owl: "http://www.w3.org/2002/07/owl#" "owl")
      (prov: "http://www.w3.org/ns/prov#" "prov")
      (rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#" "rdf")
      (rdfa: "http://www.w3.org/ns/rdfa#" "rdfa")
      (rdfs: "http://www.w3.org/2000/01/rdf-schema#" "rdfs")
      (sh: "http://www.w3.org/ns/shacl#" "sh")
      (skos: "http://www.w3.org/2004/02/skos/core#" "skos")
      (status: "http://purl.org/adms/status/" "status")
      (vann: "http://purl.org/vocab/vann/" "vann")
      (void: "http://rdfs.org/ns/void#" "void")
      (xsd: "http://www.w3.org/2001/XMLSchema#" "xsd")
    }
  }
  UNION 
  {
    ?ontology vann:preferredNamespaceUri ?IRI_base;
              vann:preferredNamespacePrefix ?IRI_prefix.
  }
  FILTER (STRSTARTS(STR($IRI), ?IRI_base))
  BIND(STR($IRI) as ?IRI_href)
  BIND(STRAFTER(STR($IRI), ?IRI_base) as ?IRI_reference)
  BIND(COALESCE(CONCAT(STR(?IRI_prefix),":",?IRI_reference), ?IRI_href) as ?result)
}
        """ .
		

